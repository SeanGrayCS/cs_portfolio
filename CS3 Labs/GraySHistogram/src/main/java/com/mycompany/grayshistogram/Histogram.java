/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.grayshistogram;

import java.awt.Color;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.TreeMap;

/**
 *
 * @author seanp
 */
public class Histogram extends javax.swing.JFrame {

    private TreeMap<Integer, Integer> histMap;
    
    /**
     * Creates new form Histogram
     */
    public Histogram() {
        initComponents();
        try {
            initMap();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_histogram = new javax.swing.JPanel();
        button_histogram = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));

        javax.swing.GroupLayout panel_histogramLayout = new javax.swing.GroupLayout(panel_histogram);
        panel_histogram.setLayout(panel_histogramLayout);
        panel_histogramLayout.setHorizontalGroup(
            panel_histogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_histogramLayout.setVerticalGroup(
            panel_histogramLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );

        button_histogram.setText("Display Histogram");
        button_histogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_histogramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel_histogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(button_histogram)
                        .addGap(0, 463, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_histogram)
                .addGap(14, 14, 14)
                .addComponent(panel_histogram, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void initMap() throws FileNotFoundException {
        histMap = new TreeMap<>();
        Scanner data = new Scanner(new File("DAT\\histogram.dat"));
        while(data.hasNextInt()) {
            int num = data.nextInt();
            if (histMap.containsKey(num)) {
                histMap.replace(num, histMap.get(num) + 1);
            } else {
                histMap.put(num, 1);
            }
        }
    }
    
    private void button_histogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_histogramActionPerformed
        buildGraph();
    }//GEN-LAST:event_button_histogramActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Histogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Histogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Histogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Histogram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Histogram().setVisible(true);
            }
        });
    }
    
    private void buildGraph() {
        
        int displayHeight = panel_histogram.getHeight();
        int displayWidth = panel_histogram.getWidth();
        
        Graphics g = panel_histogram.getGraphics();
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, displayWidth, displayHeight);
        
        int buffer = 20;
        
        int max = 0;
        int numKeys = histMap.keySet().size();
        int[] keys = new int[numKeys];
        int count = 0;
        for (int key : histMap.keySet()) {
            if (histMap.get(key) > max) {
                max = histMap.get(key);
            }
            keys[count] = key;
            count++;
        }
        int yScaleFactor = (int) Math.floor((displayHeight - (3 * buffer)) /
                (max + 1));
        int xScaleFactor = (int) Math.floor((displayWidth - buffer) /
                (numKeys + 1));
        
        int[] heights = new int[max + 2];
        g.setColor(Color.WHITE);
        count = 0;
        for (int i = buffer; i < displayHeight - (2 * buffer); i += yScaleFactor) {
            g.drawString("" + (max - ((i - buffer) / yScaleFactor) + 1), buffer,
                    i + (yScaleFactor / 7));
            g.drawLine(2 * buffer, i, displayWidth - buffer, i);
            heights[count] = i;
            count++;
        }
        
        for (int i = 0; i < keys.length; i++) {
            int height = heights[max - histMap.get(keys[i]) + 1];
            g.setColor(Color.WHITE);
            g.drawString("" + (i + 1), (buffer * 4) + (i * xScaleFactor) +
                    (xScaleFactor / 5), heights[max + 1] + buffer);
            g.setColor(Color.RED);
            g.fillRect((buffer * 4) + (i * xScaleFactor),
                    height, xScaleFactor / 2, heights[max + 1] - height);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_histogram;
    private javax.swing.JPanel panel_histogram;
    // End of variables declaration//GEN-END:variables
}
