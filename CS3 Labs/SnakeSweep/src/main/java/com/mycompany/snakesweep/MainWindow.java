/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.snakesweep;

import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.GridBagConstraints;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import javax.swing.Timer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author seanp
 */
public class MainWindow extends javax.swing.JFrame {
    
    // CONSTANTS
    public static final ImageIcon CHECK_ICON
            = new ImageIcon("images\\Checkmark.png");
    public static final ImageIcon X_ICON = new ImageIcon("images\\Xmark.png");
    
    // Instance vaiables
    // Grid variables
    private Square[][] grid;
    private int gridHeight;
    private int gridWidth;
    
    // Bomb variables
    private double bombRate;
    private int bombsLeft;
    private int totalBombs;
    private int numCovered;
    
    // Ends the game
    private boolean gameOver;
    
    // Checks if a game has been done yet
    private boolean firstGame;
    
    // Counts the time in a game
    private int time;
    private Timer timer;
    
    // Listener for mouse clicks on squares
    private MouseListener squareListener;
    
    // Used to toggle exclusive fullscreen mode
    private KeyListener keyListener;
    private boolean fullScreen;
    
    // Used for active rendering in exclusive fullscreen mode
    private GUICanvas guiCanvas;
    private GridCanvas gridCanvas;
    
    
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        initGridDimensions();
        initDifficulty();
        initTimer();
        setLabels();
        initMouseListener();
        initKeyListener();
        fullScreen = false;
        gameOver = true;
        firstGame = false;
        // To be used when actively rendering
        initGUICanvas();
        initGridCanvas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        status_panel = new javax.swing.JPanel();
        timer_label = new javax.swing.JLabel();
        timer_text = new javax.swing.JTextField();
        bombs_label = new javax.swing.JLabel();
        bombs_text = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        difficulty_slider = new javax.swing.JSlider();
        difficulty_label = new javax.swing.JLabel();
        slider_panel = new javax.swing.JPanel();
        row_label = new javax.swing.JLabel();
        row_slider = new javax.swing.JSlider();
        column_slider = new javax.swing.JSlider();
        column_label = new javax.swing.JLabel();
        num_columns = new javax.swing.JTextField();
        num_rows = new javax.swing.JTextField();
        button_start = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        grid_panel = new javax.swing.JPanel();
        menubar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);
        setMinimumSize(new java.awt.Dimension(1920, 1080));
        setSize(new java.awt.Dimension(1920, 1080));

        status_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        timer_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timer_label.setText("Timer");

        timer_text.setEditable(false);
        timer_text.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        bombs_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bombs_label.setText("Bombs Remaining");

        bombs_text.setEditable(false);
        bombs_text.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        difficulty_slider.setMaximum(4);
        difficulty_slider.setMinimum(1);
        difficulty_slider.setPaintLabels(true);
        difficulty_slider.setPaintTicks(true);
        difficulty_slider.setSnapToTicks(true);
        difficulty_slider.setValue(2);
        java.util.Hashtable<Integer, JLabel> difficulty_labels = new java.util.Hashtable<>();
        difficulty_labels.put(1, new JLabel("1"));
        difficulty_labels.put(2, new JLabel("2"));
        difficulty_labels.put(3, new JLabel("3"));
        difficulty_labels.put(4, new JLabel("4"));

        difficulty_slider.setLabelTable(difficulty_labels);
        difficulty_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                difficulty_sliderStateChanged(evt);
            }
        });

        difficulty_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        difficulty_label.setText("Difficulty");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(difficulty_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(difficulty_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(difficulty_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(difficulty_slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        row_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        row_label.setText("Rows");
        row_label.setPreferredSize(new java.awt.Dimension(50, 26));

        row_slider.setMaximum(26);
        row_slider.setMinimum(1);
        row_slider.setSnapToTicks(true);
        row_slider.setToolTipText("");
        row_slider.setValue(12);
        row_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                row_sliderStateChanged(evt);
            }
        });

        column_slider.setMaximum(58);
        column_slider.setMinimum(1);
        column_slider.setSnapToTicks(true);
        column_slider.setToolTipText("");
        column_slider.setValue(30);
        column_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                column_sliderStateChanged(evt);
            }
        });

        column_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        column_label.setText("Columns");
        column_label.setPreferredSize(new java.awt.Dimension(50, 26));

        num_columns.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        num_columns.setPreferredSize(new java.awt.Dimension(50, 26));
        num_columns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_columnsActionPerformed(evt);
            }
        });
        /*
        num_columns.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent evt) {
                num_columnsActionPerformed(new ActionEvent(num_columns,
                    ActionEvent.ACTION_PERFORMED, ""));
        }
        public void removeUpdate(javax.swing.event.DocumentEvent evt) {
            num_columnsActionPerformed(new ActionEvent(num_columns,
                ActionEvent.ACTION_PERFORMED, ""));
    }
    public void insertUpdate(javax.swing.event.DocumentEvent evt) {
        num_columnsActionPerformed(new ActionEvent(num_columns,
            ActionEvent.ACTION_PERFORMED, ""));
    }
    });
    */

    num_rows.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    num_rows.setPreferredSize(new java.awt.Dimension(50, 26));
    num_rows.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            num_rowsActionPerformed(evt);
        }
    });
    /*
    num_rows.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent evt) {
            num_rowsActionPerformed(new ActionEvent(num_rows,
                ActionEvent.ACTION_PERFORMED, ""));
    }
    @Override
    public void removeUpdate(javax.swing.event.DocumentEvent evt) {
        num_rowsActionPerformed(new ActionEvent(num_rows,
            ActionEvent.ACTION_PERFORMED, ""));
    }
    @Override
    public void insertUpdate(javax.swing.event.DocumentEvent evt) {
        num_rowsActionPerformed(new ActionEvent(num_rows,
            ActionEvent.ACTION_PERFORMED, ""));
    }
    });
    */

    button_start.setText("Start Game");
    button_start.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            button_startActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout slider_panelLayout = new javax.swing.GroupLayout(slider_panel);
    slider_panel.setLayout(slider_panelLayout);
    slider_panelLayout.setHorizontalGroup(
        slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(slider_panelLayout.createSequentialGroup()
            .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(slider_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(row_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(column_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(5, 5, 5)
                    .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(row_slider, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                        .addComponent(column_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(5, 5, 5)
                    .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(num_columns, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(num_rows, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(slider_panelLayout.createSequentialGroup()
                    .addGap(319, 319, 319)
                    .addComponent(button_start)))
            .addContainerGap())
    );
    slider_panelLayout.setVerticalGroup(
        slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(slider_panelLayout.createSequentialGroup()
            .addComponent(button_start)
            .addGap(20, 20, 20)
            .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(row_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(slider_panelLayout.createSequentialGroup()
                    .addComponent(row_label, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(slider_panelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(num_rows, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(column_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(slider_panelLayout.createSequentialGroup()
                    .addGroup(slider_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(column_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(num_columns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 152, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 80, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout status_panelLayout = new javax.swing.GroupLayout(status_panel);
    status_panel.setLayout(status_panelLayout);
    status_panelLayout.setHorizontalGroup(
        status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(status_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bombs_text)
                    .addComponent(bombs_label))
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
            .addComponent(slider_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
            .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timer_text, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timer_label, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );
    status_panelLayout.setVerticalGroup(
        status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(status_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(status_panelLayout.createSequentialGroup()
                    .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(status_panelLayout.createSequentialGroup()
                            .addComponent(bombs_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bombs_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(status_panelLayout.createSequentialGroup()
                            .addComponent(timer_label)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(timer_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(status_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(status_panelLayout.createSequentialGroup()
                            .addGap(1, 1, 1)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(status_panelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(slider_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    grid_panel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

    javax.swing.GroupLayout grid_panelLayout = new javax.swing.GroupLayout(grid_panel);
    grid_panel.setLayout(grid_panelLayout);
    grid_panelLayout.setHorizontalGroup(
        grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 0, Short.MAX_VALUE)
    );
    grid_panelLayout.setVerticalGroup(
        grid_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 525, Short.MAX_VALUE)
    );

    jMenu1.setText("File");
    menubar.add(jMenu1);

    jMenu2.setText("Edit");
    menubar.add(jMenu2);

    setJMenuBar(menubar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(status_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(grid_panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(status_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(grid_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    java.awt.GridBagLayout grid_panelGBLayout = new java.awt.GridBagLayout();
    grid_panel.setLayout(grid_panelGBLayout);

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_startActionPerformed
        if (timer.isRunning()) {
            timer.stop();
        }
        initGrid();
        gameOver = false;
        bombs_text.setText("" + bombsLeft);
        time = 0;
        timer_text.setText("" + time);
        timer.start();
        if (!fullScreen) {
            repaint();
        }
        requestFocus();
    }//GEN-LAST:event_button_startActionPerformed

    private void row_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_row_sliderStateChanged
        gridHeight = row_slider.getValue();
        num_rows.setText("" + gridHeight);
        bombsLeft = totalBombs = (int) (gridHeight * gridWidth * bombRate);
        numCovered = gridHeight * gridWidth;
        bombs_text.setText("" + bombsLeft);
        renderComponent(row_slider);
        requestFocus();
    }//GEN-LAST:event_row_sliderStateChanged

    private void column_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_column_sliderStateChanged
        gridWidth = column_slider.getValue();
        num_columns.setText("" + gridWidth);
        bombsLeft = totalBombs = (int) (gridHeight * gridWidth * bombRate);
        numCovered = gridHeight * gridWidth;
        bombs_text.setText("" + bombsLeft);
        renderComponent(column_slider);
        requestFocus();
    }//GEN-LAST:event_column_sliderStateChanged

    private void num_rowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_rowsActionPerformed
        Runnable doActionPerformed = new Runnable() {
            @Override
            public void run() {
                if (!num_rows.getText().matches("\\d+")
                        || Integer.parseInt(num_rows.getText()) < 1
                        || Integer.parseInt(num_rows.getText()) > 26) {
                    num_rows.setText("" + row_slider.getValue());
                    return;
                }
                row_slider.setValue(Integer.parseInt(num_rows.getText()));
                row_sliderStateChanged(new javax.swing.event.ChangeEvent(
                        row_slider));
           }
        };
        SwingUtilities.invokeLater(doActionPerformed);
    }//GEN-LAST:event_num_rowsActionPerformed

    private void num_columnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_columnsActionPerformed
        Runnable doActionPerformed = new Runnable() {
            @Override
           public void run() {
                if (!num_columns.getText().matches("\\d+")
                        || Integer.parseInt(num_columns.getText()) < 1
                        || Integer.parseInt(num_columns.getText()) > 58) {
                    num_columns.setText("" + column_slider.getValue());
                    return;
                }
                column_slider.setValue(Integer.parseInt(num_columns.getText()));
                column_sliderStateChanged(new javax.swing.event.ChangeEvent(
                        column_slider));
            }
        };
        SwingUtilities.invokeLater(doActionPerformed);
    }//GEN-LAST:event_num_columnsActionPerformed

    private void difficulty_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_difficulty_sliderStateChanged
        switch (difficulty_slider.getValue()) {
            case 1 -> bombRate = 0.05;
            case 2 -> bombRate = 0.10;
            case 3 -> bombRate = 0.20;
            case 4 -> bombRate = 0.30;
            default -> bombRate = 0.10;
        }
        bombsLeft = totalBombs = (int) (gridHeight * gridWidth * bombRate);
        bombs_text.setText("" + bombsLeft);
        requestFocus();
    }//GEN-LAST:event_difficulty_sliderStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bombs_label;
    private javax.swing.JTextField bombs_text;
    private javax.swing.JButton button_start;
    private javax.swing.JLabel column_label;
    private javax.swing.JSlider column_slider;
    private javax.swing.JLabel difficulty_label;
    private javax.swing.JSlider difficulty_slider;
    private javax.swing.JPanel grid_panel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JTextField num_columns;
    private javax.swing.JTextField num_rows;
    private javax.swing.JLabel row_label;
    private javax.swing.JSlider row_slider;
    private javax.swing.JPanel slider_panel;
    private javax.swing.JPanel status_panel;
    private javax.swing.JLabel timer_label;
    private javax.swing.JTextField timer_text;
    // End of variables declaration//GEN-END:variables

    private void initDifficulty() {
        switch (difficulty_slider.getValue()) {
            case 1 -> bombRate = 0.05;
            case 2 -> bombRate = 0.10;
            case 3 -> bombRate = 0.20;
            case 4 -> bombRate = 0.30;
            default -> bombRate = 0.10;
        }
        bombsLeft = totalBombs = (int) (gridHeight * gridWidth * bombRate);
        numCovered = gridHeight * gridWidth;
    }
    
    private void initTimer() {
        time = 0;
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                time++;
                timer_text.setText("" + time);
            }
        }) {
            @Override
            public void start() {
                time = 0;
                super.start();
            }
        };
        timer.setInitialDelay(1);
    }
    
    private void initGridDimensions() {
        gridHeight = row_slider.getValue();
        gridWidth = column_slider.getValue();
    }
    
    private void setLabels() {
        num_rows.setText("" + gridHeight);
        num_columns.setText("" + gridWidth);
        bombs_text.setText("" + bombsLeft);
        timer_text.setText("" + time);
    }
    
    private void initMouseListener() {
        squareListener = new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                mouseActionPerformed(e);
                requestFocus();
            }
            
            @Override
            public void mousePressed(MouseEvent e) {}
            
            @Override
            public void mouseReleased(MouseEvent e) {}
            
            @Override
            public void mouseEntered(MouseEvent e) {}
            
            @Override
            public void mouseExited(MouseEvent e) {}
        };
    }
    
    private void initKeyListener() {
        this.setAlwaysOnTop(true);
        setFocusable(true);
        requestFocus();
        keyListener = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyPressed(KeyEvent e) {
                keyActionPerformed(e);
            }

            @Override
            public void keyReleased(KeyEvent e) {}
            
        };
        
        addKeyListener(keyListener);
    }
    
    private void initGUICanvas() {
        guiCanvas = new GUICanvas();
    }
    
    private void initGridCanvas() {
        gridCanvas = new GridCanvas();
    }
    
    private void addGUIBuffer(int numBuffers) {
        status_panel.add(guiCanvas);
        status_panel.setVisible(true);
        guiCanvas.createBufferStrategy(numBuffers);
    }
    
    private void addGridBuffer(int numBuffers) {
        grid_panel.add(gridCanvas);
        grid_panel.setVisible(true);
        gridCanvas.createBufferStrategy(numBuffers);
    }
    
    private void removeGUIBuffer() {
        status_panel.remove(guiCanvas);
    }
    
    private void removeGridBuffer() {
        grid_panel.remove(gridCanvas);
    }
    
    private void initGrid() {
        
        firstGame = true;
        grid = new Square[gridHeight][gridWidth];
        
        for (int i = 0; i < gridHeight; i++) {
            for (int j = 0; j < gridWidth; j++) {
                grid[i][j] = new Square(i, j);
            }
        }
        
        numCovered = gridHeight * gridWidth;
        
        bombsLeft = totalBombs;
        
// =========================== Assign the bombs ================================
        // Randomly assings bombs based on the bombRate
        // Assign the square to a bomb by making Square.numBombs = 9
        
        String randString = "";
        int numLength = (int)Math.ceil(Math.log10(numCovered-1));
        int numsNeeded = numLength * totalBombs;
        while (randString.length() < numsNeeded) {
            randString += ("" + Math.random()).substring(2);
        }
        for (int i = 0; i < totalBombs; i++) {
            int beginIdx = i*numLength;
            int endIdx = (i+1)*numLength;
            if (randString.length() > endIdx) {
                randString += ("" + Math.random()).substring(2);
            }
            int sqrValue = Integer.parseInt(randString.substring(
                    beginIdx, endIdx));
            int row = sqrValue / gridWidth;
            int col = row != 0 ? sqrValue % (row * gridWidth) : sqrValue;
            if (row >= gridHeight || col >= gridWidth || 
                    grid[row][col].getNumBombs() == 9) {
                i--;
                randString = randString.substring(0, beginIdx) +
                        randString.substring(endIdx, randString.length());
                continue;
            }
            grid[row][col].setNumBombs(9);
            // Increment the bomnb count of each adjacent square
            incrementAdj(row, col);
        }
        /*
        for (int i = 0; i < bombsLeft; i++) {
            int row = (int) (Math.random() * (gridHeight - 1));
            int col = (int) (Math.random() * (gridWidth - 1));
            if (grid[row][col].getNumBombs() == 9) {
                i--;
                continue;
            }
            grid[row][col].setNumBombs(9);
            // Increment the bomnb count of each adjacent square
            incrementAdj(row, col);
        }*/

// =============================================================================
        buildGUI();
        
    }
    
    private void incrementAdj(int row, int col) {
        row--;
        col -= 2;
        for (int i = 0; i < 8; i++) {
            if (i == 3 || i == 5) {
                col -= 3;
                row++;
            }
            col += i == 4 ? 2 : 1;
            if (row < 0 || col < 0 || row >= gridHeight || col >= gridWidth) {
                continue;
            }
            grid[row][col].setNumBombs(grid[row][col].getNumBombs() + 1);
        }
    } 
    
    private void printGrid() {
        
        // Loop through the grid 2D array and output it. 0 is no bomb, 9 is bomb
        for (Square[] row : grid) {
            for (Square sqr : row) {
                System.out.print(sqr.getNumBombs() + " ");
            }
            System.out.print("\n");
        }
        
    }
    
    private void buildGUI() {
        grid_panel.removeAll();
        int gx = grid_panel.getX();
        int gy = grid_panel.getY() + menubar.getHeight();
        int gw = grid_panel.getWidth();
        int gh = grid_panel.getHeight();
        System.out.println(gx + ", " + gy + " : " + gw + ", " + gh);
        
        for (int row = 0; row < gridHeight; row++) {
            for (int col = 0; col < gridWidth; col++) {
                int weightx = 0;
                int weighty = 0;
                GridBagConstraints constraints = new GridBagConstraints(
                        col, row, 1, 1, weightx, weighty, 
                        GridBagConstraints.CENTER, GridBagConstraints.NONE,
                        new Insets(0, 0, 0, 0), 0, 0);
                
                grid[row][col].removeMouseListener(squareListener);
                grid[row][col].addMouseListener(squareListener);
                grid_panel.add(grid[row][col], constraints,
                        (row * gridWidth) + col);
                
                /*
                grid[row][col].setVisible(false);
                if (fullScreen) {
                    grid_panel.validate();
                    synchronized (grid_panel.getTreeLock()) {
                        renderComponent((Square)grid_panel.getComponent((
                                row * gridWidth) + col));
                    }
                }
                */
            }
        }
        
        /*
        if (!fullScreen) {
            renderComponent(grid_panel);
        }
        */
        grid_panel.validate();
        grid_panel.setVisible(true);
        for (Component child : grid_panel.getComponents()) {
            child.setVisible(true);
        }
        Graphics g = getGraphics();
        if (g != null) {
            g.drawImage(grid_panel.createImage(gw, gh), gx, gy, null);
            g.dispose();
            Toolkit.getDefaultToolkit().sync();
        }
        requestFocus();
    }
    
    private void setInGUI(int row, int col) {
        grid_panel.remove((row * gridWidth) + col);
        GridBagConstraints constraints = new GridBagConstraints(
                        col, row, 1, 1, 0, 0, 
                        GridBagConstraints.CENTER, GridBagConstraints.NONE,
                        new Insets(0, 0, 0, 0), 0, 0);
        grid_panel.add(grid[row][col], constraints, (row * gridWidth) + col);
        if (fullScreen) {
            synchronized (grid_panel.getTreeLock()) {
                renderComponent((Square) grid_panel.getComponent(
                        (row * gridWidth) + col));
            }
        } else {
            grid_panel.revalidate();
            grid_panel.repaint();
            requestFocus();
        }
    }
    
    private void mouseActionPerformed(MouseEvent e) {
        Square sqr = (Square) e.getComponent();
        // BUTTON1 - Left Click, clearSquares()
        // BUTTON2 - Mouse Wheel Click, do nothing
        // BUTTON3 - Right Click, toggle flag icon and enable/disable left mouse
        
        int buttonClicked = e.getButton();
        //System.out.println("Button Clicked = "  + buttonClicked);
        
        if (gameOver) {
            return;
        }
        
        int sqrX = sqr.getGridX();
        int sqrY = sqr.getGridY();
        boolean isFlag = sqr.isFlag();
        boolean isCovered = sqr.isCovered();
        
        switch (buttonClicked) {
            case MouseEvent.BUTTON1 -> {
                if (isFlag || !isCovered) {
                    break;
                }
                if (sqr.getNumBombs() == 9) {
                    gameOver = true;
                    System.out.println("Game Over -- You Lose");
                    for (int i = 0; i < grid.length; i++) {
                        for (int j = 0; j < grid[0].length; j++) {
                            grid[i][j].setCovered(false);
                            setInGUI(i, j);
                        }
                    }
                    timer.stop();
                    JOptionPane.showMessageDialog(this, "You Lose", "GAME OVER",
                            JOptionPane.PLAIN_MESSAGE, X_ICON);
                    return;
                }
                clearSquares(sqrX, sqrY);
                if (numCovered == totalBombs) {
                    gameOver = true;
                    System.out.println("Game Over -- You Win");
                    timer.stop();
                    JOptionPane.showMessageDialog(this, "You Win", "GAME OVER",
                            JOptionPane.PLAIN_MESSAGE, CHECK_ICON);
                    return;
                }
            }
            case MouseEvent.BUTTON3 ->  {
                if (!isCovered) {
                    break;
                }
                if (isFlag) {
                    bombsLeft++;
                    grid[sqrX][sqrY].setFlag(false);
                } else {
                    bombsLeft--;
                    grid[sqrX][sqrY].setFlag(true);
                }
                bombs_text.setText("" + bombsLeft);
                setInGUI(sqrX, sqrY);
            }
            default -> {
                return;
            }
        }
        
    }
    
    private void clearSquares(int x, int y) {
        numCovered--;
        if (grid[x][y].isFlag()) {
            grid[x][y].setFlag(false);
            bombsLeft++;
        }
        grid[x][y].setCovered(false);
        setInGUI(x, y);
        if (grid[x][y].getNumBombs() == 0) {
            x--;
            y -= 2;
            for (int i = 0; i < 8; i++) {
                if (i == 3 || i == 5) {
                    y -= 3;
                    x++;
                }
                y += i == 4 ? 2 : 1;
                if (x < 0 || y < 0 || x >= gridHeight || y >= gridWidth) {
                    continue;
                }
                if (grid[x][y] != null && grid[x][y].isCovered()) {
                    clearSquares(x, y);
                }
            }
        }
    }
    
    // Make keybinds
    private void keyActionPerformed(KeyEvent e) {
        // F11 Keybind to fullscreen
        //System.out.println("Key Pressed = " + e.getKeyChar());
        if (e.getKeyCode() == KeyEvent.VK_F11) {
            GraphicsDevice mainDevice = GraphicsEnvironment
                    .getLocalGraphicsEnvironment().getDefaultScreenDevice();
            
            boolean fullScreenSupported = mainDevice.isFullScreenSupported();
            
            dispose();
            if (fullScreenSupported && !fullScreen) {
                //addGUIBuffer(2);
                //addGridBuffer(2);
                setIgnoreRepaint(true);
                setUndecorated(true);
                setResizable(false);
                mainDevice.setFullScreenWindow(this);
                validate();
                fullScreen = true;
                Window fsw = mainDevice.getFullScreenWindow();
                //fsw.add(getContentPane());
                fsw.add(menubar);
                Image img = fsw.createImage(1920, 1080);
                fsw.prepareImage(img, fsw);
                while (fsw.checkImage(img, fsw) == 0) {
                    try {
                        synchronized (fsw.getTreeLock()) {
                            System.out.println(fsw.checkImage(img, fsw));
                            Thread.sleep(10);
                        }
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                requestFocus();
                //repaint();
                timer.setInitialDelay(10);
            } else {
                removeGUIBuffer();
                removeGridBuffer();
                setUndecorated(false);
                setResizable(true);
                mainDevice.setFullScreenWindow(null);
                pack();
                setExtendedState(JFrame.MAXIMIZED_BOTH);
                setVisible(true);
                setIgnoreRepaint(false);
                fullScreen = false;
                timer.setInitialDelay(1);
                repaint();
            }
        }
    }
    
    private void renderComponent(Container comp) {
        if (fullScreen) {
            // Use active rendering
            try {
                //System.out.println(getIgnoreRepaint());
                int width = comp.getWidth();
                int height = comp.getHeight();
                Graphics g = comp.getGraphics();
                g.clearRect(0, 0, width, height);
                comp.validate();
                Image img = comp.createImage(width, height);
                Toolkit.getDefaultToolkit().prepareImage(img, width, height,
                        comp);
                g.drawImage(img, 0, 0, comp);
                g.dispose();
                if (comp.getComponentCount() == 0) {
                    Toolkit.getDefaultToolkit().sync();
                    return;
                }
                
                synchronized (comp.getTreeLock()) {
                    for (Component child : comp.getComponents()) {
                        if (child instanceof Square) {
                            renderComponent((Square) child);
                        } else if (child instanceof Container) {
                            renderComponent((Container)child);
                        } else {
                            renderComponent(child);
                        }
                    }
                    Toolkit.getDefaultToolkit().sync();
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                requestFocus();
            }
        } else {
            // Use passive rendering
            //System.out.println(getIgnoreRepaint());
            comp.revalidate();
            comp.repaint();
            requestFocus();
        }
    }
    
    private void renderComponent(Component comp) {
        if (fullScreen) {
            // Use active rendering
            try {
                //System.out.println(getIgnoreRepaint());
                int width = comp.getWidth();
                int height = comp.getHeight();
                Graphics g = comp.getGraphics();
                g.clearRect(0, 0, width, height);
                comp.validate();
                Image img = comp.createImage(width, height);
                Toolkit.getDefaultToolkit().prepareImage(img, width, height,
                        comp);
                g.drawImage(img, 0, 0, comp);
                g.dispose();
                Toolkit.getDefaultToolkit().sync();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                requestFocus();
            }
        } else {
            // Use passive rendering
            //System.out.println(getIgnoreRepaint());
            comp.revalidate();
            comp.repaint();
            requestFocus();
        }
    }
    
    private void renderComponent(Square comp) {
        if (fullScreen) {
        // Actively render a square
        try {
                comp.getGraphics().drawImage((
                        (ImageIcon) comp.getIcon()).getImage(),
                        0, 0, ((ImageIcon) comp.getIcon()).getImageObserver());
                Toolkit.getDefaultToolkit().sync();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            // Use passive rendering
            //System.out.println(getIgnoreRepaint());
            comp.revalidate();
            comp.repaint();
            requestFocus();
        }
    }
    
}