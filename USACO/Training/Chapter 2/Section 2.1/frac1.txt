/*
ID: sean.gr1
LANG: JAVA
TASK: frac1
*/
import java.io.*;
import java.util.*;

class frac1 {
  private static PriorityQueue<Fraction> pq;
  private static HashSet<Double> valSet;

  public static void main (String [] args) throws IOException {
    String f = "frac1.in";
    String o = "frac1.out";

    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(o)));

    int n = Integer.parseInt(in.readLine());

    pq = new PriorityQueue<>();
    valSet = new HashSet<>();

    for (int i = 2; i <= n; i++) {
      for (int j = 1; j < i; j++) {
	double val = j / ((double) i);
	if (!valSet.contains(val)) {
	  pq.offer(new Fraction(j, i, val));
	  valSet.add(val);
	}
      }
    }

    out.println("0/1");
    while (!pq.isEmpty()) {
      out.println(pq.poll());
    }
    out.println("1/1");

    out.close();
  }
}

class Fraction implements Comparable<Fraction> {
  private int numerator;
  private int denominator;

  private double value;

  public Fraction(int numerator, int denominator, double value) {
    int gcd = gcd(denominator, numerator);
    this.numerator = numerator / gcd;
    this.denominator = denominator / gcd;

    this.value = value;
  }

  public double getValue() {
    return value;
  }

  private int gcd(int a, int b) {
    if (a == b || b == 0 || a == 1) {
      return a;
    }
    if (a == 0 || b == 1) {
      return b;
    }

    if (b > a) {
      return gcd(a, b%a);
    }
    return gcd(b, a%b);
  }

  @Override
  public int compareTo(Fraction o) {
    double cmp = this.getValue() - o.getValue();

    if (cmp > 0) {
      return 1;
    }
    return (cmp < 0) ? -1 : 0;
  }

  @Override
  public String toString() {
    return numerator + "/" + denominator;
  }
}