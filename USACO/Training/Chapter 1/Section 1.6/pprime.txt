/*
ID: sean.gr1
LANG: JAVA
TASK: pprime
*/
import java.io.*;
import java.util.*;

class pprime {
  private static PriorityQueue<Integer> pq;

  public static void main (String [] args) throws IOException {
    String f = "pprime.in";
    String o = "pprime.out";

    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(o)));

    StringTokenizer st = new StringTokenizer(in.readLine());

    int a = Integer.parseInt(st.nextToken());
    int b = Integer.parseInt(st.nextToken());

    pq = new PriorityQueue<>();
    genPalindromes(a, b);

    while (!pq.isEmpty()) {
      out.println(pq.poll());
    }

    out.close();
  }

  private static void genPalindromes(int lower, int upper) {
    int palin = 0;

    for (int d1 = 1; d1 <= 9; d1+=2) {
      palin = d1;
      if (palin > upper) {
	break;
      }
      if (palin >= lower) {
	checkPrime(palin);
      }

      palin = d1*10 + d1;
      if (palin > upper) {
	continue;
      }
      if (palin >= lower) {
	checkPrime(palin);
      }

      for (int d2 = 0; d2 <= 9; d2++) {
	palin = d1*100 + d2*10 + d1;
	if (palin > upper) {
	  break;
	}
	if (palin >= lower) {
	  checkPrime(palin);
	}

	palin = d1*1000 + d2*100 + d2*10 + d1;
	if (palin > upper) {
	  continue;
	}
	if (palin >= lower) {
	  checkPrime(palin);
	}

	for (int d3 = 0; d3 <= 9; d3++) {
	  palin = d1*10000 + d2*1000 + d3*100 + d2*10 + d1;
	  if (palin > upper) {
	    break;
	  }
	  if (palin >= lower) {
	    checkPrime(palin);
	  }

	  palin = d1*100000 + d2*10000 + d3*1000 + d3*100 + d2*10 + d1;
	  if (palin > upper) {
	    continue;
	  }
	  if (palin >= lower) {
	    checkPrime(palin);
	  }

	  for (int d4 = 0; d4 <= 9; d4++) {
	    palin = d1*1000000 + d2*100000 + d3*10000 + d4*1000 + d3*100 + d2*10 + d1;
	    if (palin > upper) {
	        break;
	    }
	    if (palin >= lower) {
	      checkPrime(palin);
	    }

	    palin = d1*10000000 + d2*1000000 + d3*100000 + d4*10000 + d4*1000 + d3*100 + d2*10 + d1;
	    if (palin > upper) {
	      continue;
	    }
	    if (palin >= lower) {
	      checkPrime(palin);
	    }
	  }
	}
      }
    }
  }

  private static void checkPrime(int palin) {
    if (palin % 2 == 0 || palin % 3 == 0) {
      return;
    }

    int sqrtPalin = (int) Math.sqrt(palin);

    for (int i = 6; i-1 <= sqrtPalin; i+=6) {
      if (palin % (i-1) == 0) {
	return;
      }
      if (palin % i == 0) {
	return;
      }
      if (palin % (i+1) == 0) {
	return;
      }
    }

    pq.offer(palin);
  }

}