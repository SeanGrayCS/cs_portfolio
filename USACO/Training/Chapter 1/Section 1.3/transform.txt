/*
ID: sean.gr1
LANG: JAVA
TASK: transform
*/
import java.io.*;
import java.util.*;

class transform {
  public static void main (String [] args) throws IOException {
    String f = "transform.in";
    String o = "transform.out";

    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(o)));

    int n = Integer.parseInt(in.readLine());

    Boolean[][] before = new Boolean[n][n];
    Boolean[][] after = new Boolean[n][n];

    for (int i = 0; i < n; i++) {
      before[i] = Arrays.stream(in.readLine().split("")).map(let -> {return let.equals("@");}).toArray(Boolean[]::new);
    }

    boolean diff = false;
    for (int i = 0; i < n; i++) {
      after[i] = Arrays.stream(in.readLine().split("")).map(let -> {return let.equals("@");}).toArray(Boolean[]::new);

      if (diff) {
	continue;
      }
      for (int j = 0; j < n; j++) {
	if (diff) {
	  break;
	}
	diff = after[i][j] ^ before[i][j];
      }
    }

      int pattern = 7, min = Integer.MAX_VALUE;

      if (r90(before, after)) {
	pattern = 1;
      } else if (r180(before, after)) {
	pattern = 2;
      }else if (r270(before, after)) {
	pattern = 3;
      } else if (flipCheck(before, after)) {
	pattern = 4;
      } else if (combos(before, after)) {
	pattern = 5;
      } else if (!diff) {
	pattern = 6;
      }

      out.println("" + pattern);

    out.close();
  }

  public static boolean r90 (Boolean[][] before, Boolean[][] after) {
    for (int i = 0; i < before.length; i++) {
      for (int j = 0; j < before[i].length; j++) {
	if (before[i][j] ^ after[j][after[j].length-i-1]) {
	  return false;
	}
      }
    }
    return true;
  }

  public static boolean r180 (Boolean[][] before, Boolean[][] after) {
    for (int i = 0; i < before.length; i++) {
      for (int j = 0; j < before[i].length; j++) {
	if (before[i][j] ^ after[after.length-i-1][after[i].length-j-1]) {
	  return false;
	}
      }
    }
    return true;
  }

  public static boolean r270 (Boolean[][] before, Boolean[][] after) {
    for (int i = 0; i < before.length; i++) {
      for (int j = 0; j < before[i].length; j++) {
	if (before[i][j] ^ after[after[j].length-j-1][i]) {
	  return false;
	}
      }
    }
    return true;
  }

  public static boolean flipCheck (Boolean[][] before, Boolean[][] after) {
    return check(flip(before), after);
  }

  public static boolean combos (Boolean[][] before, Boolean[][] after) {
    before = flip(before);
    return r90(before, after) || r180(before, after) || r270(before, after);
  }

  private static Boolean[][] flip (Boolean[][] b) {
    Boolean[][] before = new Boolean[b.length][b[0].length];
    
    for (int i = 0; i < before.length; i++) {
      for (int j = 0; j < before[i].length/2; j++) {
	before[i][j] = b[i][b[i].length-j-1];
	before[i][before[i].length-j-1] = b[i][j];
      }
      for (int j = before[i].length/2; j < (before[i].length+1)/2; j++) {
	before[i][j] = b[i][j];
      }
    }
    return before;
  }

  private static boolean check (Boolean[][] before, Boolean[][] after) {
    for (int i = 0; i < before.length; i++) {
      for (int j = 0; j < before[i].length; j++) {
	if (before[i][j] ^ after[i][j]) {
	  return false;
	}
      }
    }
    return true;
  }
}